import {edit_distance} from "../src/edit-distance";
import {replaceArray} from "../src/array";

type pair = [string, string];
const pairs: pair[] = [
  ['Andrew', 'Amdrewz']
  , ['William Cohen', 'Willliam Cohon']
  , ['Another fine day in the park', 'Anybody can see him pick the ball']
  , ['https://people.cs.umass.edu/~mccallum/courses/cl2006/lect4-stredit.pdf'
    , 'https://www.google.com.hk/search?q=edit+distance+example+ppt&gws_rd=cr&dcr=0&ei=FrSkWuKSKcWt0gTPlL_wDQ']
  , ['\n' +
  '1\n' +
  ' Bitcoin: A Peer-to-Peer Electronic Cash SystemSatoshi Nakamotosatoshin@gmx.comwww.bitcoin.orgAbstract.   A  purely   peer-to-peer   version   of   electronic   cash   would   allow   onlinepayments   to   be   sent   directly   from   one   party   to   another   without   going   through   afinancial institution.   Digital signatures provide part of the solution, but the mainbenefits are lost if a trusted third party is still required to prevent double-spending.We propose a solution to the double-spending problem using a peer-to-peer network.The   network   timestamps   transactions   by   hashing   them   into   an   ongoing   chain   ofhash-based proof-of-work, forming a record that cannot be changed without redoingthe proof-of-work.   The longest chain not only serves as proof of the sequence ofevents witnessed, but proof that it came from the largest pool of CPU power.   Aslong as a majority of CPU power is controlled by nodes that are not cooperating toattack the network,  they\'ll  generate the  longest  chain  and  outpace attackers.   Thenetwork itself requires minimal structure.   Messages are broadcast on a best effortbasis,   and   nodes   can   leave   and   rejoin   the   network   at   will,   accepting   the   longestproof-of-work chain as proof of what happened while they were gone.1.IntroductionCommerce on the Internet has come to rely almost exclusively on financial institutions serving astrusted third  parties  to process electronic payments.   While the  system works  well enough formost   transactions,   it   still   suffers   from   the   inherent   weaknesses   of   the   trust   based   model.Completely non-reversible transactions are not really possible, since financial institutions cannotavoid   mediating   disputes.     The   cost   of   mediation   increases   transaction   costs,   limiting   theminimum practical transaction size and cutting off the possibility for small casual transactions,and   there   is   a   broader   cost   in   the   loss   of   ability   to   make   non-reversible   payments   for   non-reversible services.  With the possibility of reversal, the need for trust spreads.  Merchants mustbe wary of their customers, hassling them for more information than they would otherwise need.A certain percentage of fraud is accepted as unavoidable.  These costs and payment uncertaintiescan be avoided in person by using physical currency, but no mechanism exists to make paymentsover a communications channel without a trusted party.What is needed is an electronic payment system based on cryptographic proof instead of trust,allowing any two willing parties to transact directly with each other without the need for a trustedthird  party.    Transactions  that  are  computationally  impractical  to   reverse   would  protect  sellersfrom fraud, and routine escrow mechanisms could easily be implemented to protect buyers.   Inthis paper, we propose a solution to the double-spending problem using a peer-to-peer distributedtimestamp server to generate computational proof of the chronological order of transactions.  Thesystem   is   secure   as   long   as   honest   nodes   collectively   control   more   CPU   power   than   anycooperating group of attacker nodes.1\n' +
  '2.TransactionsWe define an electronic coin as a chain of digital signatures.  Each owner transfers the coin to thenext by digitally signing a hash of the previous transaction and the public key of the next ownerand adding these to the end of the coin.  A payee can verify the signatures to verify the chain ofownership.The problem of course is the payee can\'t verify that one of the owners did not double-spendthe coin.  A common solution is to introduce a trusted central authority, or mint, that checks everytransaction for double spending.  After each transaction, the coin must be returned to the mint toissue a new coin, and only coins issued directly from the mint are trusted not to be double-spent.The   problem   with   this   solution   is   that   the   fate   of   the   entire   money   system   depends   on   thecompany running the mint, with every transaction having to go through them, just like a bank.We   need   a   way   for   the   payee   to   know   that   the   previous   owners   did   not   sign   any   earliertransactions.   For our purposes, the earliest transaction is the one that counts, so we don\'t careabout later attempts to double-spend.  The only way to confirm the absence of a transaction is tobe aware of all transactions.  In the mint based model, the mint was aware of all transactions anddecided   which   arrived   first.    To  accomplish   this   without   a   trusted   party,   transactions   must   bepublicly announced [1], and we need a system for participants to agree on a single history of theorder in which they were received.  The payee needs proof that at the time of each transaction, themajority of nodes agreed it was the first received. 3.Timestamp ServerThe solution we propose begins with a timestamp server.  A timestamp server works by taking ahash   of   a   block   of   items   to   be   timestamped   and   widely   publishing   the   hash,   such   as   in   anewspaper or Usenet post [2-5].   The timestamp proves that the data must have existed at thetime, obviously, in order to get into the hash.  Each timestamp includes the previous timestamp inits hash, forming a chain, with each additional timestamp reinforcing the ones before it.2BlockItemItem...HashBlockItemItem...HashTransactionOwner 1\'sPublic KeyOwner 0\'sSignatureHashTransactionOwner 2\'sPublic KeyOwner 1\'sSignatureHashVerifyTransactionOwner 3\'sPublic KeyOwner 2\'sSignatureHashVerifyOwner 2\'sPrivate KeyOwner 1\'sPrivate KeySign  Sign  Owner 3\'sPrivate Key\n'
    , '\n' +
    '26\n' +
    ' double-spending transaction.  When the input flow of “honest” transactions islarge enough compared to the attacker’s computational power, the probabilitythat  the  double-spending  transaction  has  a  larger  cumulative  weight  can  beestimated using the formula (12) (see also examples below (12)).4.  The  attack  method  of  building  a  “parasite  chain”  makes  approval  strategiesbased  on  height  or  score  obsolete  since  the  attacker’s  sites  will  have  highervalues for these metrics when compared to the legitimate tangle.  On the otherhand,  the  MCMC  tip  selection  algorithm  described  in  Section  4.1  seems  toprovide protection against this kind of attack.5.  The MCMC tip selection algorithm also offers protection against the lazy nodesas a bonus.5  Resistance to quantum computationsIt is known that a sufficiently large quantum computer35could be very efficient forhandling problems that rely on trial and error to find a solution. The process of findinga nonce in order to generate a Bitcoin block is a good example of such a problem.  Asof today, one must check an average of 268nonces to find a suitable hash that allowsa new block to be generated.  It is known (see e.g. [15]) that a quantum computerwould need Θ(√N) operations to solve a problem that is analogous to the Bitcoinpuzzle stated above.  This same problem would need  Θ(N) operations on a classicalcomputer.  Therefore, a quantum computer would be around√268= 234≈17 billiontimes more efficient at mining the Bitcoin blockchain than a classical computer.  Also,it is worth noting that if a blockchain does not increase its difficulty in response toincreased hashing power, there would be an increased rate of orphaned blocks.For the same reason, a “large weight” attack would also be much more efficienton  a  quantum  computer.   However,  capping  the  weight  from  above,  as  suggestedin Section 4, would effectively prevent a quantum computer attack as well.  This isevident in iota because the number of nonces that one needs to check in order to finda suitable hash for issuing a transaction is not unreasonably large.  On average, it isaround 38.  The gain of efficiency for an “ideal” quantum computer would therefore beof order 34= 81, which is already quite acceptable36. More importantly, the algorithmused in the iota implementation is structured such that the time to find a nonce is35Still a hypothetical construct as of today.36Note that Θ(√N) could easily mean 10√N.26\n' +
    'not much larger than the time needed for other tasks that are necessary to issue atransaction.  The latter part is much more resistant against quantum computing, andtherefore gives the tangle much more protection against an adversary with a quantumcomputer when compared to the (Bitcoin) blockchain.AcknowledgementsThe author thanks Bartosz Kusmierz, Cyril Gr ̈unspan and Toru Kazama who pointedout several errors in earlier drafts, and James Brogan for his contributions towardsmaking this paper more readable.References[1]  Iota:  a cryptocurrency for Internet-of-Things. Seehttp://www.iotatoken.com/,andhttps://bitcointalk.org/index.php?topic=1216479.0[2]  bitcoinj. Working with micropayment channels.https://bitcoinj.github.io/working-with-micropayments[3]people  on  nxtforum.org(2014)    DAG,    a    generalized    blockchain.https://nxtforum.org/proof-of-stake-algorithm/dag-a-generalized-blockchain/(registration atnxtforum.orgrequired)[4]Moshe Babaioff, Shahar Dobzinski, Sigal Oren, Aviv Zohar(2012) OnBitcoin and red balloons.Proc. 13th ACM Conf. Electronic Commerce, 56–73.[5]Richard Durrett(2004)  Probability  –  Theory  and  Examples.Duxbury ad-vanced series.[6]Sergio Demian Lerner(2015)  DagCoin:   a  cryptocurrency  without  blocks.https://bitslog.wordpress.com/2015/09/11/dagcoin/[7]Yonatan  Sompolinsky,  Aviv  Zohar(2013)    Accelerating    Bitcoin’sTransactionProcessing.FastMoneyGrowsonTrees,NotChains.https://eprint.iacr.org/2013/881.pdf[8]Yonatan Sompolinsky, Yoad Lewenberg, Aviv Zohar(2016) SPECTRE:Serialization  of  Proof-of-work  Events:   Confirming  Transactions  via  RecursiveElections.https://eprint.iacr.org/2016/1159.pdf27\n' +
    '[9]Yoad Lewenberg, Yonatan Sompolinsky, Aviv Zohar(2015) InclusiveBlock Chain Protocols.http://www.cs.huji.ac.il/~avivz/pubs/15/inclusivebtc.pdf[10]Joseph Poon, Thaddeus Dryja(2016)  The  Bitcoin  Lightning  Network:Scalable Off-Chain Instant Payments.https://lightning.network/lightning-network-paper.pdf[11]Sheldon M. Ross(2012)Introduction to Probability Models.10th ed.[12]David Vorick(2015) Getting rid of blocks.slides.com/davidvorick/braids[13]Amir Dembo, Ofer Zeitouni(2010)Large Deviations Techniques and Ap-plications.Springer.[14]Sheldon M. Ross(2009)A First Course in Probability.8th ed.[15]Gilles Brassard, Peter Hyer, Alain Tapp(1998) Quantum cryptanalysisof hash and claw-free functions.Lecture Notes in Computer Science1380, 163–169.28'
  ]
].map(([s, t]) => [s.substring(0, 2000), t.substring(0, 2000)] as pair);

// replaceArray(pairs, [['kitten', 'sitting'] as pair]);

pairs.forEach(pair => {
  const format_s = (s: string) => {
    return [s.length, s.substring(0, 100)];
  };
  console.log('going to test length of:', [pair[0].length, pair[1].length]);
  const start = Date.now();
  const d = edit_distance(pair[0], pair[1]);
  const end = Date.now();
  console.log('time:', (end - start), 'ms, distance:', d + ',', 'pair:');
  console.log(pair.map(format_s));
});
